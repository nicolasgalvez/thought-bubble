name: Build and Zip WordPress Plugin
env:
  PLUGIN_NAME: thought-bubble
on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'  # Trigger this workflow on push to tags like v1.0, v20.15.10 etc.

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install Composer dependencies
        run: composer install

      - name: Build JS
        run: npm run build

      - name: Run wp-scripts plugin-zip # Use the wp-scripts command to create a zip with only the files needed.
        run: npm run plugin-zip

      - name: Unzip the plugin # This is a workaround because the plugin-zip command doesn't place the files in a directory with the plugin name.
        run: |
          unzip $PLUGIN_NAME.zip -d $PLUGIN_NAME

      - name: Re-zip the plugin # The WP updater expects the plugin files to be in a directory with the plugin name.
        run: zip -r $PLUGIN_NAME.zip $PLUGIN_NAME

      - name: Create GitHub Release (if tag push)
        if: startsWith(github.ref, 'refs/tags/')
        run: gh release create ${{ github.ref }} ./$PLUGIN_NAME.zip -t ${{ github.ref }} -n "Release ${{ github.ref }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (if manual release)
        if: github.event_name == 'release'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./$PLUGIN_NAME.zip
          asset_name: $PLUGIN_NAME.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
